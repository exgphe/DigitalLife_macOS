// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DigitalLife.proto
#if !NO_PROTOBUF
#include "DigitalLife.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace DigitalLifeNameSpace {
class C_BaseAskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_BaseAsk> _instance;
} _C_BaseAsk_default_instance_;
class S_SwitchMeshDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_SwitchMesh> _instance;
} _S_SwitchMesh_default_instance_;
class S_AllowedSayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_AllowedSay> _instance;
} _S_AllowedSay_default_instance_;
class C_SendDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_SendData> _instance;
} _C_SendData_default_instance_;
class S_RetDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S_RetData> _instance;
} _S_RetData_default_instance_;
}  // namespace DigitalLifeNameSpace
static void InitDefaultsscc_info_C_BaseAsk_DigitalLife_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DigitalLifeNameSpace::_C_BaseAsk_default_instance_;
    new (ptr) ::DigitalLifeNameSpace::C_BaseAsk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_BaseAsk_DigitalLife_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_BaseAsk_DigitalLife_2eproto}, {}};

static void InitDefaultsscc_info_C_SendData_DigitalLife_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DigitalLifeNameSpace::_C_SendData_default_instance_;
    new (ptr) ::DigitalLifeNameSpace::C_SendData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_SendData_DigitalLife_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_SendData_DigitalLife_2eproto}, {}};

static void InitDefaultsscc_info_S_AllowedSay_DigitalLife_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DigitalLifeNameSpace::_S_AllowedSay_default_instance_;
    new (ptr) ::DigitalLifeNameSpace::S_AllowedSay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S_AllowedSay_DigitalLife_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S_AllowedSay_DigitalLife_2eproto}, {}};

static void InitDefaultsscc_info_S_RetData_DigitalLife_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DigitalLifeNameSpace::_S_RetData_default_instance_;
    new (ptr) ::DigitalLifeNameSpace::S_RetData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S_RetData_DigitalLife_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S_RetData_DigitalLife_2eproto}, {}};

static void InitDefaultsscc_info_S_SwitchMesh_DigitalLife_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DigitalLifeNameSpace::_S_SwitchMesh_default_instance_;
    new (ptr) ::DigitalLifeNameSpace::S_SwitchMesh();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S_SwitchMesh_DigitalLife_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S_SwitchMesh_DigitalLife_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DigitalLife_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DigitalLife_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DigitalLife_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DigitalLife_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::C_BaseAsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::C_BaseAsk, basetype_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::C_BaseAsk, bsuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_SwitchMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_SwitchMesh, basetype_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_SwitchMesh, meshtype_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_SwitchMesh, bsuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_AllowedSay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_AllowedSay, basetype_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_AllowedSay, bsuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::C_SendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::C_SendData, basetype_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::C_SendData, wavfiledata_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::C_SendData, bsuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_RetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_RetData, basetype_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_RetData, statetype_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_RetData, wavfiledata_),
  PROTOBUF_FIELD_OFFSET(::DigitalLifeNameSpace::S_RetData, bsuccess_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DigitalLifeNameSpace::C_BaseAsk)},
  { 7, -1, sizeof(::DigitalLifeNameSpace::S_SwitchMesh)},
  { 15, -1, sizeof(::DigitalLifeNameSpace::S_AllowedSay)},
  { 22, -1, sizeof(::DigitalLifeNameSpace::C_SendData)},
  { 30, -1, sizeof(::DigitalLifeNameSpace::S_RetData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DigitalLifeNameSpace::_C_BaseAsk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DigitalLifeNameSpace::_S_SwitchMesh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DigitalLifeNameSpace::_S_AllowedSay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DigitalLifeNameSpace::_C_SendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DigitalLifeNameSpace::_S_RetData_default_instance_),
};

const char descriptor_table_protodef_DigitalLife_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021DigitalLife.proto\022\024DigitalLifeNameSpac"
  "e\"V\n\tC_BaseAsk\0227\n\010BaseType\030\001 \001(\0162%.Digit"
  "alLifeNameSpace.BaseMessageType\022\020\n\010bSucc"
  "ess\030\017 \001(\010\"\346\001\n\014S_SwitchMesh\0227\n\010BaseType\030\001"
  " \001(\0162%.DigitalLifeNameSpace.BaseMessageT"
  "ype\022C\n\010MeshType\030\002 \001(\01621.DigitalLifeNameS"
  "pace.S_SwitchMesh.ClientMeshType\022\020\n\010bSuc"
  "cess\030\017 \001(\010\"F\n\016ClientMeshType\022\031\n\025CLIENTME"
  "SHTYPE_PAIMON\020\000\022\031\n\025CLIENTMESHTYPE_YUNFEI"
  "\020\001\"Y\n\014S_AllowedSay\0227\n\010BaseType\030\001 \001(\0162%.D"
  "igitalLifeNameSpace.BaseMessageType\022\020\n\010b"
  "Success\030\017 \001(\010\"l\n\nC_SendData\0227\n\010BaseType\030"
  "\001 \001(\0162%.DigitalLifeNameSpace.BaseMessage"
  "Type\022\023\n\013WavFileData\030\002 \001(\014\022\020\n\010bSuccess\030\017 "
  "\001(\010\"~\n\tS_RetData\0227\n\010BaseType\030\001 \001(\0162%.Dig"
  "italLifeNameSpace.BaseMessageType\022\021\n\tSta"
  "teType\030\002 \001(\005\022\023\n\013WavFileData\030\003 \001(\014\022\020\n\010bSu"
  "ccess\030\017 \001(\010*\262\001\n\017BaseMessageType\022\030\n\024BASEM"
  "ESSAGETYPE_None\020\000\022\036\n\032BASEMESSAGETYPE_SWI"
  "TCHMESH\020\001\022\036\n\032BASEMESSAGETYPE_ALLOWEDSAY\020"
  "\002\022\"\n\036BASEMESSAGETYPE_CLIENTSENDDATA\020\003\022!\n"
  "\035BASEMESSAGETYPE_SERVERRETDATA\020\004*F\n\016Clie"
  "ntMeshType\022\031\n\025CLIENTMESHTYPE_PAIMON\020\000\022\031\n"
  "\025CLIENTMESHTYPE_YUNFEI\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DigitalLife_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DigitalLife_2eproto_sccs[5] = {
  &scc_info_C_BaseAsk_DigitalLife_2eproto.base,
  &scc_info_C_SendData_DigitalLife_2eproto.base,
  &scc_info_S_AllowedSay_DigitalLife_2eproto.base,
  &scc_info_S_RetData_DigitalLife_2eproto.base,
  &scc_info_S_SwitchMesh_DigitalLife_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DigitalLife_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DigitalLife_2eproto = {
  false, false, descriptor_table_protodef_DigitalLife_2eproto, "DigitalLife.proto", 952,
  &descriptor_table_DigitalLife_2eproto_once, descriptor_table_DigitalLife_2eproto_sccs, descriptor_table_DigitalLife_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_DigitalLife_2eproto::offsets,
  file_level_metadata_DigitalLife_2eproto, 5, file_level_enum_descriptors_DigitalLife_2eproto, file_level_service_descriptors_DigitalLife_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DigitalLife_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DigitalLife_2eproto)), true);
namespace DigitalLifeNameSpace {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S_SwitchMesh_ClientMeshType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DigitalLife_2eproto);
  return file_level_enum_descriptors_DigitalLife_2eproto[0];
}
bool S_SwitchMesh_ClientMeshType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr S_SwitchMesh_ClientMeshType S_SwitchMesh::CLIENTMESHTYPE_PAIMON;
constexpr S_SwitchMesh_ClientMeshType S_SwitchMesh::CLIENTMESHTYPE_YUNFEI;
constexpr S_SwitchMesh_ClientMeshType S_SwitchMesh::ClientMeshType_MIN;
constexpr S_SwitchMesh_ClientMeshType S_SwitchMesh::ClientMeshType_MAX;
constexpr int S_SwitchMesh::ClientMeshType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DigitalLife_2eproto);
  return file_level_enum_descriptors_DigitalLife_2eproto[1];
}
bool BaseMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMeshType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DigitalLife_2eproto);
  return file_level_enum_descriptors_DigitalLife_2eproto[2];
}
bool ClientMeshType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class C_BaseAsk::_Internal {
 public:
};

C_BaseAsk::C_BaseAsk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DigitalLifeNameSpace.C_BaseAsk)
}
C_BaseAsk::C_BaseAsk(const C_BaseAsk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&basetype_, &from.basetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
    reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  // @@protoc_insertion_point(copy_constructor:DigitalLifeNameSpace.C_BaseAsk)
}

void C_BaseAsk::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
}

C_BaseAsk::~C_BaseAsk() {
  // @@protoc_insertion_point(destructor:DigitalLifeNameSpace.C_BaseAsk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_BaseAsk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void C_BaseAsk::ArenaDtor(void* object) {
  C_BaseAsk* _this = reinterpret_cast< C_BaseAsk* >(object);
  (void)_this;
}
void C_BaseAsk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_BaseAsk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_BaseAsk& C_BaseAsk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_BaseAsk_DigitalLife_2eproto.base);
  return *internal_default_instance();
}


void C_BaseAsk::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitalLifeNameSpace.C_BaseAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&basetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BaseAsk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_basetype(static_cast<::DigitalLifeNameSpace::BaseMessageType>(val));
        } else goto handle_unusual;
        continue;
      // bool bSuccess = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_BaseAsk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitalLifeNameSpace.C_BaseAsk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_basetype(), target);
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_bsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitalLifeNameSpace.C_BaseAsk)
  return target;
}

size_t C_BaseAsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitalLifeNameSpace.C_BaseAsk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_basetype());
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_BaseAsk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DigitalLifeNameSpace.C_BaseAsk)
  GOOGLE_DCHECK_NE(&from, this);
  const C_BaseAsk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_BaseAsk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DigitalLifeNameSpace.C_BaseAsk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DigitalLifeNameSpace.C_BaseAsk)
    MergeFrom(*source);
  }
}

void C_BaseAsk::MergeFrom(const C_BaseAsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitalLifeNameSpace.C_BaseAsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basetype() != 0) {
    _internal_set_basetype(from._internal_basetype());
  }
  if (from.bsuccess() != 0) {
    _internal_set_bsuccess(from._internal_bsuccess());
  }
}

void C_BaseAsk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DigitalLifeNameSpace.C_BaseAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_BaseAsk::CopyFrom(const C_BaseAsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitalLifeNameSpace.C_BaseAsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BaseAsk::IsInitialized() const {
  return true;
}

void C_BaseAsk::InternalSwap(C_BaseAsk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_BaseAsk, bsuccess_)
      + sizeof(C_BaseAsk::bsuccess_)
      - PROTOBUF_FIELD_OFFSET(C_BaseAsk, basetype_)>(
          reinterpret_cast<char*>(&basetype_),
          reinterpret_cast<char*>(&other->basetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BaseAsk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S_SwitchMesh::_Internal {
 public:
};

S_SwitchMesh::S_SwitchMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DigitalLifeNameSpace.S_SwitchMesh)
}
S_SwitchMesh::S_SwitchMesh(const S_SwitchMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&basetype_, &from.basetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
    reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  // @@protoc_insertion_point(copy_constructor:DigitalLifeNameSpace.S_SwitchMesh)
}

void S_SwitchMesh::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
}

S_SwitchMesh::~S_SwitchMesh() {
  // @@protoc_insertion_point(destructor:DigitalLifeNameSpace.S_SwitchMesh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SwitchMesh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void S_SwitchMesh::ArenaDtor(void* object) {
  S_SwitchMesh* _this = reinterpret_cast< S_SwitchMesh* >(object);
  (void)_this;
}
void S_SwitchMesh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SwitchMesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_SwitchMesh& S_SwitchMesh::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_SwitchMesh_DigitalLife_2eproto.base);
  return *internal_default_instance();
}


void S_SwitchMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitalLifeNameSpace.S_SwitchMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&basetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SwitchMesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_basetype(static_cast<::DigitalLifeNameSpace::BaseMessageType>(val));
        } else goto handle_unusual;
        continue;
      // .DigitalLifeNameSpace.S_SwitchMesh.ClientMeshType MeshType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_meshtype(static_cast<::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType>(val));
        } else goto handle_unusual;
        continue;
      // bool bSuccess = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SwitchMesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitalLifeNameSpace.S_SwitchMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_basetype(), target);
  }

  // .DigitalLifeNameSpace.S_SwitchMesh.ClientMeshType MeshType = 2;
  if (this->meshtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_meshtype(), target);
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_bsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitalLifeNameSpace.S_SwitchMesh)
  return target;
}

size_t S_SwitchMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitalLifeNameSpace.S_SwitchMesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_basetype());
  }

  // .DigitalLifeNameSpace.S_SwitchMesh.ClientMeshType MeshType = 2;
  if (this->meshtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_meshtype());
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SwitchMesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DigitalLifeNameSpace.S_SwitchMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SwitchMesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SwitchMesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DigitalLifeNameSpace.S_SwitchMesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DigitalLifeNameSpace.S_SwitchMesh)
    MergeFrom(*source);
  }
}

void S_SwitchMesh::MergeFrom(const S_SwitchMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitalLifeNameSpace.S_SwitchMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basetype() != 0) {
    _internal_set_basetype(from._internal_basetype());
  }
  if (from.meshtype() != 0) {
    _internal_set_meshtype(from._internal_meshtype());
  }
  if (from.bsuccess() != 0) {
    _internal_set_bsuccess(from._internal_bsuccess());
  }
}

void S_SwitchMesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DigitalLifeNameSpace.S_SwitchMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SwitchMesh::CopyFrom(const S_SwitchMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitalLifeNameSpace.S_SwitchMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SwitchMesh::IsInitialized() const {
  return true;
}

void S_SwitchMesh::InternalSwap(S_SwitchMesh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SwitchMesh, bsuccess_)
      + sizeof(S_SwitchMesh::bsuccess_)
      - PROTOBUF_FIELD_OFFSET(S_SwitchMesh, basetype_)>(
          reinterpret_cast<char*>(&basetype_),
          reinterpret_cast<char*>(&other->basetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SwitchMesh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S_AllowedSay::_Internal {
 public:
};

S_AllowedSay::S_AllowedSay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DigitalLifeNameSpace.S_AllowedSay)
}
S_AllowedSay::S_AllowedSay(const S_AllowedSay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&basetype_, &from.basetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
    reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  // @@protoc_insertion_point(copy_constructor:DigitalLifeNameSpace.S_AllowedSay)
}

void S_AllowedSay::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
}

S_AllowedSay::~S_AllowedSay() {
  // @@protoc_insertion_point(destructor:DigitalLifeNameSpace.S_AllowedSay)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_AllowedSay::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void S_AllowedSay::ArenaDtor(void* object) {
  S_AllowedSay* _this = reinterpret_cast< S_AllowedSay* >(object);
  (void)_this;
}
void S_AllowedSay::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_AllowedSay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_AllowedSay& S_AllowedSay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_AllowedSay_DigitalLife_2eproto.base);
  return *internal_default_instance();
}


void S_AllowedSay::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitalLifeNameSpace.S_AllowedSay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&basetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_AllowedSay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_basetype(static_cast<::DigitalLifeNameSpace::BaseMessageType>(val));
        } else goto handle_unusual;
        continue;
      // bool bSuccess = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_AllowedSay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitalLifeNameSpace.S_AllowedSay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_basetype(), target);
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_bsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitalLifeNameSpace.S_AllowedSay)
  return target;
}

size_t S_AllowedSay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitalLifeNameSpace.S_AllowedSay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_basetype());
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_AllowedSay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DigitalLifeNameSpace.S_AllowedSay)
  GOOGLE_DCHECK_NE(&from, this);
  const S_AllowedSay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_AllowedSay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DigitalLifeNameSpace.S_AllowedSay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DigitalLifeNameSpace.S_AllowedSay)
    MergeFrom(*source);
  }
}

void S_AllowedSay::MergeFrom(const S_AllowedSay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitalLifeNameSpace.S_AllowedSay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basetype() != 0) {
    _internal_set_basetype(from._internal_basetype());
  }
  if (from.bsuccess() != 0) {
    _internal_set_bsuccess(from._internal_bsuccess());
  }
}

void S_AllowedSay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DigitalLifeNameSpace.S_AllowedSay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_AllowedSay::CopyFrom(const S_AllowedSay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitalLifeNameSpace.S_AllowedSay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_AllowedSay::IsInitialized() const {
  return true;
}

void S_AllowedSay::InternalSwap(S_AllowedSay* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_AllowedSay, bsuccess_)
      + sizeof(S_AllowedSay::bsuccess_)
      - PROTOBUF_FIELD_OFFSET(S_AllowedSay, basetype_)>(
          reinterpret_cast<char*>(&basetype_),
          reinterpret_cast<char*>(&other->basetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_AllowedSay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class C_SendData::_Internal {
 public:
};

C_SendData::C_SendData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DigitalLifeNameSpace.C_SendData)
}
C_SendData::C_SendData(const C_SendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wavfiledata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wavfiledata().empty()) {
    wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wavfiledata(), 
      GetArena());
  }
  ::memcpy(&basetype_, &from.basetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
    reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  // @@protoc_insertion_point(copy_constructor:DigitalLifeNameSpace.C_SendData)
}

void C_SendData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C_SendData_DigitalLife_2eproto.base);
  wavfiledata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
}

C_SendData::~C_SendData() {
  // @@protoc_insertion_point(destructor:DigitalLifeNameSpace.C_SendData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_SendData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wavfiledata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_SendData::ArenaDtor(void* object) {
  C_SendData* _this = reinterpret_cast< C_SendData* >(object);
  (void)_this;
}
void C_SendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_SendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_SendData& C_SendData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_SendData_DigitalLife_2eproto.base);
  return *internal_default_instance();
}


void C_SendData::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitalLifeNameSpace.C_SendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wavfiledata_.ClearToEmpty();
  ::memset(&basetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_basetype(static_cast<::DigitalLifeNameSpace::BaseMessageType>(val));
        } else goto handle_unusual;
        continue;
      // bytes WavFileData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_wavfiledata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bSuccess = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_SendData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitalLifeNameSpace.C_SendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_basetype(), target);
  }

  // bytes WavFileData = 2;
  if (this->wavfiledata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_wavfiledata(), target);
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_bsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitalLifeNameSpace.C_SendData)
  return target;
}

size_t C_SendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitalLifeNameSpace.C_SendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes WavFileData = 2;
  if (this->wavfiledata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_wavfiledata());
  }

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_basetype());
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_SendData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DigitalLifeNameSpace.C_SendData)
  GOOGLE_DCHECK_NE(&from, this);
  const C_SendData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_SendData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DigitalLifeNameSpace.C_SendData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DigitalLifeNameSpace.C_SendData)
    MergeFrom(*source);
  }
}

void C_SendData::MergeFrom(const C_SendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitalLifeNameSpace.C_SendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wavfiledata().size() > 0) {
    _internal_set_wavfiledata(from._internal_wavfiledata());
  }
  if (from.basetype() != 0) {
    _internal_set_basetype(from._internal_basetype());
  }
  if (from.bsuccess() != 0) {
    _internal_set_bsuccess(from._internal_bsuccess());
  }
}

void C_SendData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DigitalLifeNameSpace.C_SendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_SendData::CopyFrom(const C_SendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitalLifeNameSpace.C_SendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SendData::IsInitialized() const {
  return true;
}

void C_SendData::InternalSwap(C_SendData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wavfiledata_.Swap(&other->wavfiledata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SendData, bsuccess_)
      + sizeof(C_SendData::bsuccess_)
      - PROTOBUF_FIELD_OFFSET(C_SendData, basetype_)>(
          reinterpret_cast<char*>(&basetype_),
          reinterpret_cast<char*>(&other->basetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SendData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class S_RetData::_Internal {
 public:
};

S_RetData::S_RetData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DigitalLifeNameSpace.S_RetData)
}
S_RetData::S_RetData(const S_RetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wavfiledata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_wavfiledata().empty()) {
    wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wavfiledata(), 
      GetArena());
  }
  ::memcpy(&basetype_, &from.basetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
    reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  // @@protoc_insertion_point(copy_constructor:DigitalLifeNameSpace.S_RetData)
}

void S_RetData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S_RetData_DigitalLife_2eproto.base);
  wavfiledata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&basetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
}

S_RetData::~S_RetData() {
  // @@protoc_insertion_point(destructor:DigitalLifeNameSpace.S_RetData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_RetData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  wavfiledata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_RetData::ArenaDtor(void* object) {
  S_RetData* _this = reinterpret_cast< S_RetData* >(object);
  (void)_this;
}
void S_RetData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_RetData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S_RetData& S_RetData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S_RetData_DigitalLife_2eproto.base);
  return *internal_default_instance();
}


void S_RetData::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitalLifeNameSpace.S_RetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wavfiledata_.ClearToEmpty();
  ::memset(&basetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bsuccess_) -
      reinterpret_cast<char*>(&basetype_)) + sizeof(bsuccess_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RetData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_basetype(static_cast<::DigitalLifeNameSpace::BaseMessageType>(val));
        } else goto handle_unusual;
        continue;
      // int32 StateType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          statetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes WavFileData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_wavfiledata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bSuccess = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_RetData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitalLifeNameSpace.S_RetData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_basetype(), target);
  }

  // int32 StateType = 2;
  if (this->statetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_statetype(), target);
  }

  // bytes WavFileData = 3;
  if (this->wavfiledata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_wavfiledata(), target);
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_bsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitalLifeNameSpace.S_RetData)
  return target;
}

size_t S_RetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitalLifeNameSpace.S_RetData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes WavFileData = 3;
  if (this->wavfiledata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_wavfiledata());
  }

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  if (this->basetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_basetype());
  }

  // int32 StateType = 2;
  if (this->statetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_statetype());
  }

  // bool bSuccess = 15;
  if (this->bsuccess() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_RetData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DigitalLifeNameSpace.S_RetData)
  GOOGLE_DCHECK_NE(&from, this);
  const S_RetData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_RetData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DigitalLifeNameSpace.S_RetData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DigitalLifeNameSpace.S_RetData)
    MergeFrom(*source);
  }
}

void S_RetData::MergeFrom(const S_RetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitalLifeNameSpace.S_RetData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wavfiledata().size() > 0) {
    _internal_set_wavfiledata(from._internal_wavfiledata());
  }
  if (from.basetype() != 0) {
    _internal_set_basetype(from._internal_basetype());
  }
  if (from.statetype() != 0) {
    _internal_set_statetype(from._internal_statetype());
  }
  if (from.bsuccess() != 0) {
    _internal_set_bsuccess(from._internal_bsuccess());
  }
}

void S_RetData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DigitalLifeNameSpace.S_RetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_RetData::CopyFrom(const S_RetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitalLifeNameSpace.S_RetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RetData::IsInitialized() const {
  return true;
}

void S_RetData::InternalSwap(S_RetData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wavfiledata_.Swap(&other->wavfiledata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_RetData, bsuccess_)
      + sizeof(S_RetData::bsuccess_)
      - PROTOBUF_FIELD_OFFSET(S_RetData, basetype_)>(
          reinterpret_cast<char*>(&basetype_),
          reinterpret_cast<char*>(&other->basetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RetData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DigitalLifeNameSpace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DigitalLifeNameSpace::C_BaseAsk* Arena::CreateMaybeMessage< ::DigitalLifeNameSpace::C_BaseAsk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DigitalLifeNameSpace::C_BaseAsk >(arena);
}
template<> PROTOBUF_NOINLINE ::DigitalLifeNameSpace::S_SwitchMesh* Arena::CreateMaybeMessage< ::DigitalLifeNameSpace::S_SwitchMesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DigitalLifeNameSpace::S_SwitchMesh >(arena);
}
template<> PROTOBUF_NOINLINE ::DigitalLifeNameSpace::S_AllowedSay* Arena::CreateMaybeMessage< ::DigitalLifeNameSpace::S_AllowedSay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DigitalLifeNameSpace::S_AllowedSay >(arena);
}
template<> PROTOBUF_NOINLINE ::DigitalLifeNameSpace::C_SendData* Arena::CreateMaybeMessage< ::DigitalLifeNameSpace::C_SendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DigitalLifeNameSpace::C_SendData >(arena);
}
template<> PROTOBUF_NOINLINE ::DigitalLifeNameSpace::S_RetData* Arena::CreateMaybeMessage< ::DigitalLifeNameSpace::S_RetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DigitalLifeNameSpace::S_RetData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
#endif